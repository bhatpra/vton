allow_embedding: false
dependencies: []
metadata: {description: 'Upload user, cloth and see virtual try on', title: DSI Virtual Try on}
name: VTON
native_deps:
  head_html: "<script>\n  // We'll log everything to help debug.\n  console.log(\"JS: compressImage script loaded.\");\n\n  function compressImage(file, maxWidth) {\n    console.log(\"JS: compressImage called with file:\", file, \"maxWidth:\", maxWidth);\n\n    return new Promise((resolve, reject) => {\n      if (!file) {\n        console.log(\"JS: No file, rejecting\");\n        reject(\"No file object provided.\");\n        return;\n      }\n\n      // Use FileReader to read the file as data URL\n      const reader = new FileReader();\n      reader.onload = function(e) {\n        const img = new Image();\n        img.onload = function() {\n          console.log(\"JS: image onload triggered. Original size:\", img.width, \"x\", img.height);\n\n          // Scale down to maxWidth, keep aspect ratio\n          let width = img.width;\n          let height = img.height;\n\n          if (width > maxWidth) {\n            height = Math.floor((maxWidth / width) * height);\n            width = maxWidth;\n          }\n          console.log(`JS: Resizing to ${width}x${height}`);\n\n          // Draw to offscreen canvas\n          const canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0, width, height);\n\n          // You can use PNG or JPEG. \n          // For debugging, let's do JPEG at 80% quality:\n          const compressedDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n          console.log(\"JS: compressedDataUrl length:\", compressedDataUrl.length);\n\n          resolve(compressedDataUrl);\n        };\n\n        img.onerror = function(err) {\n          console.log(\"JS: image onerror triggered:\", err);\n          reject(err);\n        };\n        \n        // Start loading the image\n        img.src = e.target.result;\n      };\n\n      reader.onerror = function(err) {\n        console.log(\"JS: FileReader onerror:\", err);\n        reject(err);\n      };\n\n      // Actually read the file\n      console.log(\"JS: Starting FileReader\");\n      reader.readAsDataURL(file);\n    });\n  }\n\n  // Expose this function to window so we can call_js(\"compressImage\", ...)\n  window.compressImage = compressImage;\n</script>\n"
package_name: VTON
renamed: true
runtime_options:
  client_version: '3'
  server_spec: {base: python310-machine-learning}
  server_version: python3-sandbox
  version: 2
services:
- client_config: {}
  server_config: {}
  source: /runtime/services/tables.yml
startup_form: Form1
